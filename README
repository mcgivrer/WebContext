Web-Context
-----------
	version 1.0
	Author: Frédéric Delorme<frederic.delorme@gmail.com>

I. Introduction

	The purpose of this project is to create, test and improve a new 
	PHP framework MVC,convention naming oriented.


II. First steps

	Basicaly, the following files must be implemented at first step:
	- config/model.xml  : describing entities manipulated in your project
	- config/config.ini : initializing some environmental parameters.
	
	Then, in managers/, you create you Page manage (inheriting from Manager class)
	to generate and display your pages.
	
	The templates/ directory will host your rendering template (simple php files with 
	the .tpl file extension).

III. First project

	In final release, code will be mainly generated:
	- entity,
	- persistence,
	- Page manager,
	- routing configuration.
	
	But for this first project, code is manually created.

III.1. Config.ini
	The file will contain some system parameters like:

III.1.1. Database connection:

	[database]
	servername=localhost
	serverport=3306
	username=root
	userpassword=nathalie
	databasename=web-context

III.1.2. Site configuration
	[system]
	language="en_EN"
	encoding="UTF-8"
	path="/home/ubuntu/public_html/web-context"
	url="http://localhost/~frederic/web-context"

III.1.3. Default Theme configuration 
	[theme]
	activated=default

III.1.4. Debug module configuration
	[debug]
	logfilepath="/home/ubuntu/public_html/web-context/log/web-context.log"
	display=on
	level=DEBUG,INFO,WARN,ERROR,FATAL

III.2. Model.xml

	This is the Data model description. It contains descriptions of entities and their relations 
	manage by your web-site /web-app.
	
	for example, read the following description:

III.2.1. Entity

	<entity name="category" key="name" table="category" description="category entity to groups features by theme">
		<field name="name" type="TEXT" size="30" description="name of the category"/>
		<field name="url" type="TEXT" size="30" description="simplified name of the category to use in url"/>
		<field name="description" type="TEXT" size="255" description="description for this category"/>
		<field name="sortorder" type="NUMBER" description="sort order of appearence in list for this category"/>
	</entity>

	This is the description of a "category" entity, composed of 4 fields, and the "name" field is the key, 
	as indicated by the key="name" attribute of the <entity/> tag.
	
	<entity name="name_of_my_entity"
			 key="functional_primary_key"
			 table="persistant_table_name"
			 description="a short description used by administrative UI">
			 
	all value of the attributes must be specified in lowercase.
	
	One more field is automaticaly added by the framework, it is an unic ID autogenerated by 
	the system: [ENTITYNAME]_ID.
	
	In our sample it will be named category_id and will be an auto generated NUMBER. 

III.2.2. Field

	A field match with a database table column. sharing the same name.
	
	<field name="my_field_name"
			type="my_field_type"
			[size="size_corresponding_to_my_type"]   (optional)
			description="a short description for this field, used by administrative UI">
			
	a simple sample:
			
		<field name="name" type="TEXT" size="30" description="name of the category"/>
	
	
	possible "type" attribute value for field are:
	Basic database field type :
	- TEXT
	- NUMBER
	- DATE
	- BLOB
	- FLOAT
	
	and some more Functional oriented:
	- MAIL for mail information
	- PHONE to store an international phone number
	- CBNUMBER to manage a Blue Card number, it's value is encoded.
	
	for these last field types, format will be defined in the config.ini file, if there are different from 
	default ones:
	
	- MAIL     : firstname.lastname@domain.ext
	- PHONE    : +00 (0) 000 000 000
	- CBNUMBER : 0000 0000 0000 0000

III.2.3. Relations

	Some entities relations can be specified:
	- one-to-one
	- one-to-many
	- many-to-many
	
	A relation between 2 objects must be specified in both concerned entities with 3 new tags:
	
	<relation type="one-to-one" ... />
	<relation type="one-to-many" ... />
	<relation type="many-to-many" ... />

III.2.3.a. ONE-TO-ONE

	This is the simple relation (see datamodel relationship). only one entity linked to only one other.
	For example: a LDAP entry for a real person. the relation between this too entity will be a one-to-one.
	
	<relation type="one-to-one"
				name="name_in_source_entity" 
				entity="name_of_target_entity"
				key="target_entity_field_name" />
	
	*sample*
	
	Here a simple relation between an ldapUser, an entry for a real person in a ldap directory, and
	a "user" entity which is identified by it's "username".
	
	<relation type="one-to-one"
				name="ldapPerson" 
				entity="user"
				key="username" />	
	
III.2.3.a. ONE-TO-MANY

	*sample*
	
	Relation between a Category and some features (posts). The "feature" entity will contains a field reference 
	to "category" entity.  
	
	<relation type="one-to-many" 
		name="features" 
		entity="feature" 
		description="all posts linked to this category"/>

III.2.3.a. MANY-TO-MANY
		
	*sample*

	relation between a tags and features (posts). The "feature" entity will contains a reference 
	to "tag" entity. and a tag entity will contain a refernce to a feature entity. the persistence 
	of such a relation need a technical table wich can be described by the "persistIn" attribute.
	By default, the persistence table will be named with the 2 names of the entity, separated by 
	an underscore in the alphabetical order (here, it will be "features_tags").   
	
	<relation type="many-to-many" 
			name="features" 
			entity="feature" 
			[persistIn="tags_features"] ##to specify a different name for te persistIn table##
			description="all features marked with this tag" />

III.3. Page Manager

	A page Manager is a class describing functional operations on a real web page.
	- Attributes will mapped the Forms attributes (if some form is needed)
	- methods will be actions linked to forms button.
	- url will be routed by the Router class to manage wich entity you are working with.

	It will inherit from Manager class to implement hidden mechanism of the framework.
	
	*sample*
	
	class IndexManager extends Manager{
		public searchText="";
		
		public function search(){
			// TODO implement my search method.
		}
	
		public renderTemplate(){
			return "index/main";
		}
	}
	
III.3.1. Attributes

	Each fields of a form will be reprensented by an attribute of the class.
	
	As example, lets talk about a form to edit a user will maintain :
		- username, 
		- firstname, 
		- lastname, 
		- email 
		- and password.

	Your page manager will implement the following attributes:
	
		public username="";
		public firstname="";
		public lastname="";
		public password="";
		public email="";
	
	so the class will be:
	
	class UserManager extends Manager{
		public username="";
		public firstname="";
		public lastname="";
		public password="";
		public email="";

		public create(){
			// TODO implement the create user process
		}
		
		public delete(){
			// TODO implement the delete user process
		}
		
		public modify(){
			// TODO implement the modify user process
		}
		
		public find(){
			// TODO implement the find user process
		}
		
	}

III.3.1. Methods

	For each Button in the contained form will exist a corresponding method in the pge manager.
	The best example for such mapping is the "Search button" of the main page of a site.
	in your form will have an input field which name is "searchText" with a submit button wich name is
	"search".
	
	From your method, you will be able to access to all standard PHP common variables as $_POST[],
	$_GET[], $_SERVER[], and so on...
	
	It must return the template to use to displayed results of the implmeented process.
	
	If nothing is returned (null or "") the default renterTeplate() implemented method is called.
	
	*sample*
	
	public search(){
		// the mapping $this->searchText = $_POST['seaarchText'] is maintained by the framework
		
		__log("want to search the ".$this->searchText." into our features articles.");
		
		return "index/showresults";
	}
	
	
	the corresponding template will be stored into 
	
	/themes/[NAME_OF_THEME]/[PAGE_MANAGER_NAME]/[TEMPLATE_FILE_NAME].tpl
	
	où:
	- NAME_OF_THEME, "default" for example
	- PAGE_MANAGER_NAME, "indexManager" pour notre exemple
	- TEMPLATE_FILE_NAME, le nom du fichier de template, sans son extension ".tpl". 
	  Habituellement appelé "main.tpl" si il n'y a qu'un template pour le page manager.
	
	ainsi, dans le return statement, on a "index/showresults" qui pointe vers un fichier template:
	
		/themes/default/index/showresults.tpl
	
	Si un tel fichier n'existe pas, le fichier index/main sera recherché sinon, une page d'erreur standard 
	sera affichée avec un message d'erreur explicit.
	
III.3.1. URL REST oriented
	
		